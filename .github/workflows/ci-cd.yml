name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run tests
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: testuser
        SPRING_DATASOURCE_PASSWORD: testpassword
      run: mvn clean test
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build application
      run: mvn clean compile package -DskipTests
    
    - name: Build Docker image
      run: docker build -t ecom-microservices:${{ github.sha }} .
    
    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker tag ecom-microservices:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/ecom-microservices:latest
        docker tag ecom-microservices:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/ecom-microservices:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/ecom-microservices:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/ecom-microservices:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key
        chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/ecom-microservices:latest
          
          # Stop and remove old container
          docker stop ecom-app || true
          docker rm ecom-app || true
          
          # Run new container
          docker run -d --name ecom-app -p 8080:8080 \
            -e SPRING_DATASOURCE_URL="${{ secrets.NEON_DB_URL }}" \
            -e SPRING_DATASOURCE_USERNAME="${{ secrets.NEON_DB_USER }}" \
            -e SPRING_DATASOURCE_PASSWORD="${{ secrets.NEON_DB_PASSWORD }}" \
            ${{ secrets.DOCKER_USERNAME }}/ecom-microservices:latest
            
          # Health check
          sleep 30
          curl -f http://localhost:8080/dbhealth || exit 1
        '