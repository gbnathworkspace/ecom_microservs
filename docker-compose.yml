version: '3.8'

services:
  # Database
  postgres:
    image: postgres:13
    container_name: ecom-postgres
    environment:
      POSTGRES_DB: ecomdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecom-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: ecom-user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecomdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-password}
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Notification Service  
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: ecom-notification-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecomdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-password}
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway (when you create it)
  # api-gateway:
  #   build:
  #     context: ./api-gateway
  #     dockerfile: Dockerfile
  #   container_name: ecom-api-gateway
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     USER_SERVICE_URL: http://user-service:8081
  #     NOTIFICATION_SERVICE_URL: http://notification-service:8082
  #     PRODUCT_SERVICE_URL: http://product-service:8083
  #     ORDER_SERVICE_URL: http://order-service:8084
  #   depends_on:
  #     - user-service
  #     - notification-service
  #   networks:
  #     - ecom-network

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: ecom-load-balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user-service
      - notification-service
    networks:
      - ecom-network

volumes:
  postgres_data:

networks:
  ecom-network:
    driver: bridge